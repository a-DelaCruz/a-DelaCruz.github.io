<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://a-delacruz.github.io/a-DelaCruz.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://a-delacruz.github.io/a-DelaCruz.github.io/" rel="alternate" type="text/html" /><updated>2017-06-16T13:45:19+08:00</updated><id>http://a-delacruz.github.io/a-DelaCruz.github.io/</id><title type="html">My Notes on Single Board Computer</title><subtitle>Raspberry Pi 3 - 64-Bit kernel and arm64 rootfs
</subtitle><entry><title type="html">Raspberry Pi 3 Bluetooth Setup</title><link href="http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/06/16/rpi3-bluetooth-setup.html" rel="alternate" type="text/html" title="Raspberry Pi 3 Bluetooth Setup" /><published>2017-06-16T00:00:00+08:00</published><updated>2017-06-16T00:00:00+08:00</updated><id>http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/06/16/rpi3-bluetooth-setup</id><content type="html" xml:base="http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/06/16/rpi3-bluetooth-setup.html">&lt;p&gt;In order for the Bluetooth to work.. we need to have this file.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenELEC/misc-firmware/blob/master/firmware/brcm/BCM43430A1.hcd&quot;&gt;BCM43430A1.hcd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure this are installed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;bluetooth&lt;/li&gt;
  &lt;li&gt;bluez&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put this file: &lt;code class=&quot;highlighter-rouge&quot;&gt;BCM43430A1.hcd&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib/firmware/brcm&lt;/code&gt; folder… then create a symlink of it in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/firmware&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkdir /etc/firmware
$ sudo ln -s /lib/firmware/brcm/BCM43430A1.hcd /etc/firmware/BCM43430A1.hcd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then to test it.. run this twice:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /usr/bin/hciattach /dev/ttyAMA0 bc43xx 921600 noflow
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First run we’ll encouter &lt;code class=&quot;highlighter-rouge&quot;&gt;Initialization timed out&lt;/code&gt;. But on the second time we’ll get this &lt;code class=&quot;highlighter-rouge&quot;&gt;Device setup complete&lt;/code&gt;.
Then try it out now if our device is present.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ hcitool dev

    Devices:
        hci0   [your device id shows here]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then run your friendly &lt;code class=&quot;highlighter-rouge&quot;&gt;bluetoothctl&lt;/code&gt;. To automate this at boot, just follow the scripts from the reference below.&lt;/p&gt;

&lt;h5 id=&quot;reference&quot;&gt;Reference:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.adelpha.be/blog/index.php/2016/09/24/raspberry-pi-3-native-wifi-and-bluetooth/&lt;/li&gt;
  &lt;li&gt;https://github.com/xbianonpi/xbian/issues/813&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="ubuntu" /><summary type="html">In order for the Bluetooth to work.. we need to have this file. BCM43430A1.hcd Make sure this are installed: bluetooth bluez Put this file: BCM43430A1.hcd in /lib/firmware/brcm folder… then create a symlink of it in /etc/firmware folder. $ sudo mkdir /etc/firmware $ sudo ln -s /lib/firmware/brcm/BCM43430A1.hcd /etc/firmware/BCM43430A1.hcd Then to test it.. run this twice: $ sudo /usr/bin/hciattach /dev/ttyAMA0 bc43xx 921600 noflow First run we’ll encouter Initialization timed out. But on the second time we’ll get this Device setup complete. Then try it out now if our device is present. $ hcitool dev Devices: hci0 [your device id shows here] Then run your friendly bluetoothctl. To automate this at boot, just follow the scripts from the reference below. Reference: http://www.adelpha.be/blog/index.php/2016/09/24/raspberry-pi-3-native-wifi-and-bluetooth/ https://github.com/xbianonpi/xbian/issues/813</summary></entry><entry><title type="html">Raspberry Pi 3 Alpine Linux arm64</title><link href="http://a-delacruz.github.io/a-DelaCruz.github.io/alpine/2017/06/15/alpine-linux.html" rel="alternate" type="text/html" title="Raspberry Pi 3 Alpine Linux arm64" /><published>2017-06-15T00:00:00+08:00</published><updated>2017-06-15T00:00:00+08:00</updated><id>http://a-delacruz.github.io/a-DelaCruz.github.io/alpine/2017/06/15/alpine-linux</id><content type="html" xml:base="http://a-delacruz.github.io/a-DelaCruz.github.io/alpine/2017/06/15/alpine-linux.html">&lt;p&gt;As i was been busy studying and learning about Docker and how nice it is to use Alpine linux as the docker image because of it being small is size… unlike using ubuntu as a docker image file…This time… i decided to try Alpine linux on Raspberry Pi 3.&lt;/p&gt;

&lt;h4 id=&quot;prerequisites&quot;&gt;Prerequisites:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Alpine linux Generic Arm - &lt;a href=&quot;https://nl.alpinelinux.org/alpine/v3.6/releases/aarch64/alpine-uboot-3.6.1-aarch64.tar.gz&quot;&gt;aarch64&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For the kernel and U-boot…just follow my previous &lt;a href=&quot;rpi3-64bit-kernel-and-Uboot-booting-up&quot;&gt;post&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The files that we only need from alpine are &lt;code class=&quot;highlighter-rouge&quot;&gt;initramfs-vanilla&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;moodloop-vanila&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;apk&lt;/code&gt; folder. so go ahead and extract them.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;initramfs-vanilla&lt;/code&gt; is a compressed cpio archive. to extract it we do this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir temp
$ cd temp
$ sudo gunzip -c /boot/initramfs-vanilla | cpio -i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we need to install our latest modules into it…assuming you already compiled kernel 4.12. following this &lt;a href=&quot;rpi3-64bit-kernel-and-Uboot-booting-up&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- make modules_install INSTALL_MOD_PATH=../temp/
        when it is done go back to /temp/ folder where we extract the initramfs and into the modules folder.
$ cd temp/lib/modules/
        and remove the kernel previous version
$ sudo rm -rf 4.9~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we have our custom initramfs and then recreate the compressed cpio archive again.
Inside the folder run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo find . | cpio -H newc -o | gzip -9 &amp;gt; /boot/initramfs-rpi3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;modloop-vanilla&lt;/code&gt; is a squashfs file. make a temp folder for our custom squashfs. Then mount the &lt;code class=&quot;highlighter-rouge&quot;&gt;modloop-vanilla&lt;/code&gt; and extract the &lt;code class=&quot;highlighter-rouge&quot;&gt;/fimware&lt;/code&gt; folder from it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir /squashfs
$ sudo mount -t modloop-vanilla /mnt
$ sudo cp -av /mnt/modules/firmware /squashfs
$ sudo umount /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We also need to install module on it like we this above. And make sure to have the structure like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls /squashfs

    /squashfs/modules/firmware
    /squashfs/modules/4.12~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To make our own squashfs… using this: mksquashfs [source folder] [SquashFS target file] -comp xz -Xdict-size 100%&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mksquashfs /squashfs modloop-rpi3 - comp xz -Xdict-size 100%
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And now we have our own &lt;code class=&quot;highlighter-rouge&quot;&gt;initramfs-rpi3&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;modloop-rpi3&lt;/code&gt;. Our µsd card should now look like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/apk
/boot/Image
/boot/kernel8.img
/boot/boot.scr
/boot/initramfs-rpi3
/boot/modloop-rpi3
bcm2710-rpi-3-b.dtb
bootcode.bin
start.elf 
fixup.dat 
config.txt
cmdline.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmdline.txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;boot.scr&lt;/code&gt; for alpine linux.&lt;/p&gt;
&lt;h5 id=&quot;cmdlinetxt&quot;&gt;cmdline.txt&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;modules=loop,squashfs,sd-mod,usb-storage quiet net.ifnames=0 dwc_otg.lpm_enable=0 console=ttyAMA0,115200 fsck.repair=yes rootwait
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;bootscr&quot;&gt;boot.scr&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fdt addr 0x100
fdt get value bootargs /chosen bootargs
setenv kernel_addr_r 0x01000000
setenv ramdisk_addr_r 0x02100000
fatload mmc 0:1 ${kernel_addr_r} boot/Image
fatload mmc 0:1 ${ramdisk_addr_r} boot/initramfs-rpi3
setenv initrdsize $filesize
fatload mmc 0:1 ${fdt_addr_r} bcm2710-rpi-3-b.dtb
booti ${kernel_addr_r} ${ramdisk_addr_r}:${initrdsize} ${fdt_addr_r}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Go ahead noew and try to boot it up. You should have an output like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/alpine/images/alpine-linux-arm64-rpi3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see… there’s a hwclock error since our raspberry pi 3 don’t have any. So after you run &lt;code class=&quot;highlighter-rouge&quot;&gt;setup-alpine&lt;/code&gt; and use &lt;code class=&quot;highlighter-rouge&quot;&gt;lbu commit &lt;/code&gt; to save changes…run this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rc-update add swclock boot    # enable the software clock
rc-update del hwclock boot    # disable the hardware clock
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In my case i use &lt;code class=&quot;highlighter-rouge&quot;&gt;Busybox NTP&lt;/code&gt; as it might be the most lightweight solution. Save the changes and reboot.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lbu commit
reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;reference&quot;&gt;Reference:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;http://backreference.org/2010/07/04/modifying-initrdinitramfs-files/&lt;/li&gt;
  &lt;li&gt;https://askubuntu.com/questions/437880/extract-a-squashfs-to-an-existing-directory&lt;/li&gt;
  &lt;li&gt;https://wiki.alpinelinux.org/wiki/DIY_Fully_working_Alpine_Linux_for_Allwinner_and_Other_ARM_SOCs&lt;/li&gt;
  &lt;li&gt;https://wiki.alpinelinux.org/wiki/Raspberry_Pi&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="alpine" /><summary type="html">As i was been busy studying and learning about Docker and how nice it is to use Alpine linux as the docker image because of it being small is size… unlike using ubuntu as a docker image file…This time… i decided to try Alpine linux on Raspberry Pi 3. Prerequisites: Alpine linux Generic Arm - aarch64 For the kernel and U-boot…just follow my previous post. The files that we only need from alpine are initramfs-vanilla,moodloop-vanila, and apk folder. so go ahead and extract them. initramfs-vanilla is a compressed cpio archive. to extract it we do this: $ mkdir temp $ cd temp $ sudo gunzip -c /boot/initramfs-vanilla | cpio -i Then we need to install our latest modules into it…assuming you already compiled kernel 4.12. following this post. $ sudo ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- make modules_install INSTALL_MOD_PATH=../temp/ when it is done go back to /temp/ folder where we extract the initramfs and into the modules folder. $ cd temp/lib/modules/ and remove the kernel previous version $ sudo rm -rf 4.9~ Now we have our custom initramfs and then recreate the compressed cpio archive again. Inside the folder run: $ sudo find . | cpio -H newc -o | gzip -9 &amp;gt; /boot/initramfs-rpi3 modloop-vanilla is a squashfs file. make a temp folder for our custom squashfs. Then mount the modloop-vanilla and extract the /fimware folder from it. $ mkdir /squashfs $ sudo mount -t modloop-vanilla /mnt $ sudo cp -av /mnt/modules/firmware /squashfs $ sudo umount /mnt We also need to install module on it like we this above. And make sure to have the structure like this: $ ls /squashfs /squashfs/modules/firmware /squashfs/modules/4.12~ To make our own squashfs… using this: mksquashfs [source folder] [SquashFS target file] -comp xz -Xdict-size 100% $ sudo mksquashfs /squashfs modloop-rpi3 - comp xz -Xdict-size 100% And now we have our own initramfs-rpi3 and modloop-rpi3. Our µsd card should now look like this: /apk /boot/Image /boot/kernel8.img /boot/boot.scr /boot/initramfs-rpi3 /boot/modloop-rpi3 bcm2710-rpi-3-b.dtb bootcode.bin start.elf fixup.dat config.txt cmdline.txt We’ll modify the cmdline.txt and boot.scr for alpine linux. cmdline.txt modules=loop,squashfs,sd-mod,usb-storage quiet net.ifnames=0 dwc_otg.lpm_enable=0 console=ttyAMA0,115200 fsck.repair=yes rootwait boot.scr fdt addr 0x100 fdt get value bootargs /chosen bootargs setenv kernel_addr_r 0x01000000 setenv ramdisk_addr_r 0x02100000 fatload mmc 0:1 ${kernel_addr_r} boot/Image fatload mmc 0:1 ${ramdisk_addr_r} boot/initramfs-rpi3 setenv initrdsize $filesize fatload mmc 0:1 ${fdt_addr_r} bcm2710-rpi-3-b.dtb booti ${kernel_addr_r} ${ramdisk_addr_r}:${initrdsize} ${fdt_addr_r} Go ahead noew and try to boot it up. You should have an output like this: As you can see… there’s a hwclock error since our raspberry pi 3 don’t have any. So after you run setup-alpine and use lbu commit to save changes…run this: rc-update add swclock boot # enable the software clock rc-update del hwclock boot # disable the hardware clock In my case i use Busybox NTP as it might be the most lightweight solution. Save the changes and reboot. lbu commit reboot Reference: http://backreference.org/2010/07/04/modifying-initrdinitramfs-files/ https://askubuntu.com/questions/437880/extract-a-squashfs-to-an-existing-directory https://wiki.alpinelinux.org/wiki/DIY_Fully_working_Alpine_Linux_for_Allwinner_and_Other_ARM_SOCs https://wiki.alpinelinux.org/wiki/Raspberry_Pi</summary></entry><entry><title type="html">Raspberry Pi 3 Wifi Setup</title><link href="http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/05/17/rpi3-wifi-setup.html" rel="alternate" type="text/html" title="Raspberry Pi 3 Wifi Setup" /><published>2017-05-17T00:00:00+08:00</published><updated>2017-05-17T00:00:00+08:00</updated><id>http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/05/17/rpi3-wifi-setup</id><content type="html" xml:base="http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/05/17/rpi3-wifi-setup.html">&lt;p&gt;To make the Raspberry pi 3 Wifi to work…we need to get or have atleast 2 files. But first we must create a
folder inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib/firmware/&lt;/code&gt; and name it &lt;code class=&quot;highlighter-rouge&quot;&gt;brcm&lt;/code&gt;. And in that folder we’ll put
&lt;code class=&quot;highlighter-rouge&quot;&gt;brcmfmac43430-sdio.bin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;brcmfmac43430-sdio.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;prerequisite&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Prerequisite:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/RPi-Distro/firmware-nonfree/tree/master/brcm80211/brcm&quot;&gt;brcmfmac43430-sdio.bin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/RPi-Distro/firmware-nonfree/tree/master/brcm80211/brcm&quot;&gt;brcmfmac43430-sdio.txt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;wpa-supplicant&lt;/li&gt;
  &lt;li&gt;wireless-tools&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;
&lt;p&gt;Download and place the &lt;code class=&quot;highlighter-rouge&quot;&gt;brcmfmac43430-sdio.bin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;brcmfmac43430-sdio.txt&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib/firmware/brcm&lt;/code&gt; folder.
If the file above doesn’t make your wifi to work get it directly from the Mainstream linux: &lt;a href=&quot;git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we’ll modify &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/network/interfaces&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo nano /etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And place this following lines:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;allow-hotplug wlan0
iface wlan0 inet dhcp
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
iface default inet dhcp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For this setup my wifi interfaces id &lt;code class=&quot;highlighter-rouge&quot;&gt;wlan0&lt;/code&gt;… yours might be named differently so replace it
that matches yours.
You can set your wifi to static…just browse the references at the bottom of this page..&lt;/p&gt;

&lt;p&gt;Then we’ll configure &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/wpa_supplicant/wpa_supplicant.conf&lt;/code&gt; … so create/edit the file &lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_supplicant.conf&lt;/code&gt; and place this lines:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;network={
    ssid=&quot;NetworkEssid&quot;
    scan_ssid=1 # only needed if your access point uses a hidden ssid
    proto=RSN
    key_mgmt=WPA-PSK
    psk=&quot;NetworkPassword&quot;
	pairwise=CCMP
	auth_alg=OPEN
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Reboot and verify that wifi is now working and connected to the network.
or you could try this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ifconfig wlan0 down
$ sudo ifconfig wlan0 up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;reference&quot;&gt;&lt;a href=&quot;#header-5&quot;&gt;&lt;/a&gt;Reference:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/RPi-Distro/firmware-nonfree/tree/master/brcm80211/brcm&lt;/li&gt;
  &lt;li&gt;https://help.ubuntu.com/community/WifiDocs/WPAHowTo&lt;/li&gt;
  &lt;li&gt;https://w1.fi/cgit/hostap/plain/wpa_supplicant/wpa_supplicant.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="ubuntu" /><summary type="html">To make the Raspberry pi 3 Wifi to work…we need to get or have atleast 2 files. But first we must create a folder inside the /lib/firmware/ and name it brcm. And in that folder we’ll put brcmfmac43430-sdio.bin and brcmfmac43430-sdio.txt. Prerequisite: brcmfmac43430-sdio.bin brcmfmac43430-sdio.txt wpa-supplicant wireless-tools</summary></entry><entry><title type="html">Using Ubuntu-base arm64 rootfs fir Raspberry Pi 3</title><link href="http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/05/16/using-ubuntu-base.html" rel="alternate" type="text/html" title="Using Ubuntu-base arm64 rootfs fir Raspberry Pi 3" /><published>2017-05-16T00:00:00+08:00</published><updated>2017-05-16T00:00:00+08:00</updated><id>http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/05/16/using-ubuntu-base</id><content type="html" xml:base="http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/05/16/using-ubuntu-base.html">&lt;p&gt;Following my previous &lt;a href=&quot;rpi3-64bit-kernel-and-Uboot-booting-up&quot;&gt;post&lt;/a&gt;, we now can now boot our kernel thru U-boot. 
Now were going to create a filesystem base from arm64 ubuntu base rootfs.&lt;/p&gt;

&lt;p&gt;Create a folder were we will extract the Ubuntu base &lt;a href=&quot;http://cdimage.ubuntu.com/ubuntu-base/releases/16.04.2/release/ubuntu-base-16.04.2-base-arm64.tar.gz&quot;&gt;&lt;b&gt;rootfs&lt;/b&gt;&lt;/a&gt;, and tar to extract.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir rootfs
$ cd rootfs/
$ sudo tar xzvf ubuntu-base-16.04.2-base-arm64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;!--more--&gt;
&lt;p&gt;Install the kernel module and firmware into the rootfs folder.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules_install INSTALL_MOD_PATH={directory}/rootfs/
$ sudo ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- firmware_install INSTALL_FW_PATH={directory}rootfs/lib/firmware/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check that it was installed correctly.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls rootfs/lib/modules/4.11~

	build               modules.builtin        modules.devname      modules.symbols.bin
	kernel              modules.builtin.bin    modules.order        source
	modules.alias       modules.dep            modules.softdep
	modules.alias.bin   modules.dep.bin        modules.symbols
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well use &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; to further setup our filesystem.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo cp -av /usr/bin/qemu-aarch64-static {directory}/rootfs/usr/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;or-use-rsync-rsync--azvh-source-destination&quot;&gt;&lt;a href=&quot;#header-6&quot;&gt;&lt;/a&gt;Or use rsync: rsync -azvh source destination&lt;/h6&gt;

&lt;h6 id=&quot;note&quot;&gt;&lt;a href=&quot;#header-6&quot;&gt;&lt;/a&gt;Note:&lt;/h6&gt;
&lt;h6 id=&quot;-usrbinqemu-arm-static-is-for-32-bit-armhf-architecture&quot;&gt;&lt;a href=&quot;#header-6&quot;&gt;&lt;/a&gt;*	/usr/bin/&lt;b&gt;qemu-arm-static&lt;/b&gt; is for 32-bit armhf architecture&lt;/h6&gt;
&lt;h6 id=&quot;-usrbinqemu-aarch64-static-is-for-64-bit-arm64-architecture&quot;&gt;&lt;a href=&quot;#header-6&quot;&gt;&lt;/a&gt;*	/usr/bin/&lt;b&gt;qemu-aarch64-static&lt;/b&gt; is for 64-bit arm64 architecture&lt;/h6&gt;

&lt;p&gt;Then we need to copy &lt;code class=&quot;highlighter-rouge&quot;&gt;resolv.conf&lt;/code&gt; from our host machine for internet connection to &lt;code class=&quot;highlighter-rouge&quot;&gt;rootfs/etc/&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo cp -av /run/resolvconf/resolv.conf rootfs/etc/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enter chroot environment:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chroot {directory}rootfs/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that you’re in the chroot environment, we can now add an admin user with sudo permission.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ useradd -G sudo -m -s /bin/bash pi3
$ echo pi3:pi3 | chpasswd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;note-the-format-input-line-of-chpasswd-is-user_namepassword&quot;&gt;&lt;a href=&quot;#header-6&quot;&gt;&lt;/a&gt;Note: The format input line of chpasswd is: user_name:password.&lt;/h6&gt;

&lt;p&gt;You can setup your &lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt; here for your target device or in the kernel configuration making sure that the hostname is empty.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo U-Base_min &amp;gt; /etc/hostname
$ echo 127.0.0.1 localhost &amp;gt; /etc/hosts
$ echo 127.0.1.1 U-Base_min &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Fetch the latest package lists from server then upgrade.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-get update
$ apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then install these first:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-get install dialog perl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We need those installed first to correct some error messages abot locale:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ locale-gen &quot;en_US.UTF-8&quot;
	Generating locales...
  		en_US.UTF-8... done
	Generation complete.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Install minimal packages:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-get install sudo ifupdown net-tools ethtool udev wireless-tools iputils-ping resolvconf wget apt-utils wpasupplicant initramfs-tools
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a Ramdisk(optional).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkinitramfs -o /boot/initrd.img /lib/modules/4.11~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When everything you want to setup has been done, exit chroot:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To reduce the rootfs/ size we can remove some unwanted files.
Create a file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/dpkg/dpkg.cfg.d/01_nodoc&lt;/code&gt; which specifies the desired filters. Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;path-exclude /usr/share/doc/*
# we need to keep copyright files for legal reasons
path-include /usr/share/doc/*/copyright
path-exclude /usr/share/man/*
path-exclude /usr/share/groff/*
path-exclude /usr/share/info/*
# lintian stuff is small, but really unnecessary
path-exclude /usr/share/lintian/*
path-exclude /usr/share/linda/*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you can manually remove any documentation already installed:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo find rootfs/usr/share/doc -depth -type f ! -name copyright|xargs rm || true
$ sudo find rootfs/usr/share/doc -empty|xargs rmdir || true
$ sudo rm -rf rootfs/usr/share/man/* rootfs/usr/share/groff/* rootfs/usr/share/info/*
$ sudo rm -rf rootfs/usr/share/lintian/* rootfs/usr/share/linda/* rootfs/var/cache/man/*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;rootfs/&lt;/code&gt; content to the 2nd partition of your µSD car. Or you could make an image file with several partition on it. This will create a 2gb empty img file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dd if=/dev/zero of=myimage.img bs=1024 count=2M
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then partition it using &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk&lt;/code&gt; in my case:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo fdisk myimage.img
	Result:
	| Device     | Boot | Start 	| End	  | Sectors |
	|:-----------|:-----|:----------|:--------|:--------|
	| myimage1   |      | 2048  	| 1026047 | 1024000 | Fat
	| myimage2   |      | 1026048 	| 4194303 | 3168256 | Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Display the name of the assigned loop device:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo losetup --find --show myimage.img
	
	/dev/loop0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk&lt;/code&gt; to identify our image file partitions assinged loop&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo fdisk /dev/loop0

	Device:
		/dev/loop1
		/dev/loop2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, to assign a loopback device: and format it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo losetup /dev/loop1 myimage.img 
$ sudo losetup /dev/loop2 myimage.img
$ sudo mkfs.vfat /dev/loop1
$ sudo mkfs.ext4 /dev/loop2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;mkfsvfat--n-partition-name-devloop1&quot;&gt;&lt;a href=&quot;#header-6&quot;&gt;&lt;/a&gt;mkfs.vfat -n &lt;code class=&quot;highlighter-rouge&quot;&gt;partition name&lt;/code&gt; /dev/loop1&lt;/h6&gt;

&lt;p&gt;Mount and Copy those necessary files that we need to their respected partition.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mount /dev/loop1 /mnt/boot
$ sudo mount /dev/loop2 /mnt/rootfs

	then umount and detach:
$ sudo umount /dev/loop1
$ sudo umount /dev/loop2
$ sudo losetup --detach /dev/loop1
$ sudo losetup --detach /dev/loop2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can now burn that myimage.img to yor µsd card.
Now boot it up and you should now be able to login.&lt;/p&gt;

&lt;p&gt;Net post will be about setting up the wifi.&lt;/p&gt;

&lt;h5 id=&quot;reference&quot;&gt;&lt;a href=&quot;#header-5&quot;&gt;&lt;/a&gt;Reference:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;http://docs.khadas.com/social/BuildUbuntuRootfsViaUbuntuBase/&lt;/li&gt;
  &lt;li&gt;https://gnu-linux.org/building-ubuntu-rootfs-for-arm.html&lt;/li&gt;
  &lt;li&gt;http://manpages.ubuntu.com/manpages/xenial/man8/losetup.8.html&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="ubuntu" /><summary type="html">Following my previous post, we now can now boot our kernel thru U-boot. Now were going to create a filesystem base from arm64 ubuntu base rootfs. Create a folder were we will extract the Ubuntu base rootfs, and tar to extract. $ mkdir rootfs $ cd rootfs/ $ sudo tar xzvf ubuntu-base-16.04.2-base-arm64.tar.gz</summary></entry><entry><title type="html">Raspberry Pi 3 64bit kernel and U-boot booting up</title><link href="http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/05/16/rpi3-64bit-kernel-and-Uboot-booting-up.html" rel="alternate" type="text/html" title="Raspberry Pi 3 64bit kernel and U-boot booting up" /><published>2017-05-16T00:00:00+08:00</published><updated>2017-05-16T00:00:00+08:00</updated><id>http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/05/16/rpi3-64bit-kernel-and-Uboot-booting-up</id><content type="html" xml:base="http://a-delacruz.github.io/a-DelaCruz.github.io/ubuntu/2017/05/16/rpi3-64bit-kernel-and-Uboot-booting-up.html">&lt;p&gt;Updated, Organized and corrected some typos:&lt;/p&gt;

&lt;h4 id=&quot;cross-build-prerequisite&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Cross-build prerequisite:&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc-arch64-linux-gnu    g++-5                  ncurses-dev
make                    git                    bc          
u-boot-tools            device-tree-compiler   pkg-config-aarch64-linux-gnu
libncurses5-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;!--more--&gt;
&lt;p&gt;Assuming there is already a Cross-build environment: Built on Ubuntu Server 16.04.02&lt;/p&gt;

&lt;h4 id=&quot;prerequisites&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Prerequisites:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu Base &lt;a href=&quot;http://cdimage.ubuntu.com/ubuntu-base/releases/16.04.2/release/ubuntu-base-16.04.2-base-arm64.tar.gz&quot;&gt;Rootfs&lt;/a&gt; (install additional package using apt-get)&lt;/li&gt;
  &lt;li&gt;Raspberry pi &lt;a href=&quot;https://github.com/raspberrypi/linux.git&quot;&gt;kernel&lt;/a&gt; (Have not tried using Upstream kernel)&lt;/li&gt;
  &lt;li&gt;Raspberry pi &lt;a href=&quot;https://github.com/raspberrypi/firmware/tree/master/boot&quot;&gt;firmware&lt;/a&gt;(bootcode.bin, start.elf, fixup.dat as this are the min. files to boot)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.denx.de/wiki/U-Boot/WebHome&quot;&gt;U-boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;µsd-card-assuming-you-already-know-how-to-partition-it&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;µSD card: &lt;code class=&quot;highlighter-rouge&quot;&gt;(assuming you already know how to partition it)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Your µSD card(fat partition 1) should contain the following:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/boot
bootcode.bin
start.elf 
fixup.dat 
config.txt
cmdline.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;note-boot-sub-folder-will-contain-our-u-boot-file-kernel-and-initrd-image-file&quot;&gt;&lt;a href=&quot;#header-6&quot;&gt;&lt;/a&gt;Note: &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; sub-folder will contain our U-Boot file, Kernel and Initrd image file.&lt;/h6&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;cmdline.txt&lt;/code&gt;, we have to create them and include this lines.&lt;/p&gt;

&lt;h5 id=&quot;configtxt&quot;&gt;&lt;a href=&quot;#header-5&quot;&gt;&lt;/a&gt;config.txt:&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arm_control=0x200
force_turboo=1
enable_uart=1
device_tree_address=0x100
device_tree_end=0x8000
kernel=boot/kernel8.img
dtparam=i2c_arm=on
dtparam=spi=on
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;cmdlinetxt&quot;&gt;&lt;a href=&quot;#header-5&quot;&gt;&lt;/a&gt;cmdline.txt:&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net.ifnames=0 dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;u-boot&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;U-Boot:&lt;/h4&gt;
&lt;p&gt;Get the source code by cloning the U-Boot git repository or download the tar file.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone depth 1 branch v2017.03 single-branch git://git.denx.de/u-boot.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;or download:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ftp://ftp.denx.de/pub/u-boot/u-boot-2017.03.tar.bz2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then configure and build u-boot. For 64-bit use &lt;code class=&quot;highlighter-rouge&quot;&gt;rpi_3_defconfig&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd u-boot/
$ sudo make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- rpi_3_defconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then compile it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To change output directory use &lt;code class=&quot;highlighter-rouge&quot;&gt;O=Output path/&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- O=Output path/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After it has been built. Locate &lt;code class=&quot;highlighter-rouge&quot;&gt;u-boot.bin&lt;/code&gt; in your output_path as this is the file we need. 
Copy it to your µSD card inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot folder&lt;/code&gt; and rename it to &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel8.img&lt;/code&gt; or keep its name as is in config.txt. 
Boot it up to confirm that its working.&lt;/p&gt;

&lt;h4 id=&quot;kernel&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Kernel:&lt;/h4&gt;
&lt;p&gt;Get the kernel source code at the official Raspberry pi git repository.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone depth 1 branch v2017.03 single-branch https://github.com/raspberrypi/linux.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;bcmrpi3_defconfig&lt;/code&gt; for kernel config. 
You can further configure it according to your needs. But for now, its fine to leave it be.
You can also change the output directory using: &lt;code class=&quot;highlighter-rouge&quot;&gt;O=Output_path/&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd linux
$ sudo make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bcmrpi3_defconfig
$ sudo make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Locate &lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt; (no need to convert for U-Boot use it as it is for 64bit) file at your output_path/ &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/arm64/boot/&lt;/code&gt; 
and the &lt;code class=&quot;highlighter-rouge&quot;&gt;bcm2710-rpi-3-b.dtb&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;arch/arm/boot/dts/&lt;/code&gt;. I encounter problem using 
&lt;code class=&quot;highlighter-rouge&quot;&gt;bcm2837-rpi-3-b.dtb&lt;/code&gt;. So for now use &lt;code class=&quot;highlighter-rouge&quot;&gt;bcm2710-rpi-3-b.dtb&lt;/code&gt; instead. 
Copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot folder&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bcm2710-rpi-3-b.dtb&lt;/code&gt; in the upper most directory of your µSD card.
It should look like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/boot/Image
/boot/kernel8.img
bcm2710-rpi-3-b.dtb
bootcode.bin
start.elf 
fixup.dat 
config.txt
cmdline.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point, you can test it if it will boot the kernel but we need to have a boot script that U-Boot needs. 
Were using the boot.script from this file: &lt;a href=&quot;https://www.finnie.org/software/raspberrypi/ubuntu-rpi3/20160517-raspi3-arm64-firmware-kernel.tar.xz&quot;&gt;&lt;b&gt;20160517-raspi3-arm64-firmware-kernel.tar.xz&lt;/b&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Modify and create the &lt;code class=&quot;highlighter-rouge&quot;&gt;boot.scr&lt;/code&gt; from it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkimage -A arm64 -O linux -T script -d /path/to/boot.script /path/where/you/want/to/save
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boot.script&lt;/code&gt; should look like this: and place it inside hte &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fdt addr 0x100
fdt get value bootargs /chosen bootargs
setenv kernel_addr_r 0x01000000
setenv ramdisk_addr_r 0x02100000
fatload mmc 0:1 ${kernel_addr_r} boot/Image
fatload mmc 0:1 ${ramdisk_addr_r} boot/initrd.img
setenv initrdsize $filesize
fatload mmc 0:1 ${fdt_addr_r} bcm2710-rpi-3-b.dtb
booti ${kernel_addr_r} ${ramdisk_addr_r}:${initrdsize} ${fdt_addr_r}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since we dont have a Ramdisk yet, comment that line and replace &lt;code class=&quot;highlighter-rouge&quot;&gt;${ramdisk_addr_r}:${initrdsize}&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;.
Or copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;initrd.img&lt;/code&gt; to use it temporarily.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/boot/Image
/boot/boot.scr
/boot/kernel8.img
/boot/initrd.img
bcm2710-rpi-3-b.dtb
bootcode.bin
start.elf 
fixup.dat 
config.txt
cmdline.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can now then verify at this point that our kernel boot as well and will stop at some point 
since we still do not have a filesystem.&lt;/p&gt;

&lt;p&gt;Next post will be about on how to make a filesystem base on Ubuntu Base.&lt;/p&gt;

&lt;h5 id=&quot;reference&quot;&gt;&lt;a href=&quot;#header-5&quot;&gt;&lt;/a&gt;Reference:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;https://wiki.ubuntu.com/ARM/RaspberryPi/RaspberryPi3”&lt;/li&gt;
  &lt;li&gt;https://wiki.ubuntu.com/Base&lt;/li&gt;
  &lt;li&gt;https://www.raspberrypi.org/documentation/linux/kernel/building.md&lt;/li&gt;
  &lt;li&gt;https://kernelnomicon.org/?p=682&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="ubuntu" /><summary type="html">Updated, Organized and corrected some typos: Cross-build prerequisite: gcc-arch64-linux-gnu g++-5 ncurses-dev make git bc u-boot-tools device-tree-compiler pkg-config-aarch64-linux-gnu libncurses5-dev</summary></entry></feed>